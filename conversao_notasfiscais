import xmltodict
import os
import pandas as pd
# import json  # Usamos para visualizar melhor o dicionario dentro indentação

def pegar_infos(nome_arquivo, valores):
    # print(f'Pegou as informações {nome_arquivo}')
    with open(f'nfs/{nome_arquivo}', 'rb') as arquivo_xml:
        dic_arquivo = xmltodict.parse(arquivo_xml)
 
        # try: # Para continuar tentando localizar as informações no dicionário e se apresentar erro usar except
        if 'NFe' in dic_arquivo:
            info_nf = dic_arquivo['NFe']['infNFe']
        else:
            info_nf = dic_arquivo['nfeProc']['NFe']['infNFe']
        numero_nota = info_nf['@Id']
        empresa_emissora = info_nf['emit']['xNome']
        nome_cliente = info_nf['dest']['xNome']
        endereco = info_nf['dest']['enderDest']
        if 'vol' in info_nf['transp']:
            peso = info_nf['transp']['vol']['pesoB']
        else:
            peso = 'Não informado'
        valores.append([numero_nota, empresa_emissora, nome_cliente, endereco, peso,])
        # except Exception as msg_erro:  # comando para o que deve aparecer caso o erro apareça
        #     print(msg_erro)
        #     print(json.dumps(dic_arquivo, indent=4))
lista_arquivos = os.listdir('nfs')

colunas = ['numero_nota', 'empresa_emissora', 'nome_cliente', 'endereco', 'peso']
valores = []

for arquivo in lista_arquivos:
    pegar_infos(arquivo, valores)
    # break  # Para mostrar apenas o primeiro For da lista (primeiro item da lista)

tabela = pd.DataFrame(columns=colunas, data=valores)
pd.set_option('display.max_columns', None) # Para visualizar todas as colunas sem ocultar
# print(tabela)
tabela.to_excel('NotasFiscais.xlsx', index=False) # to_excel para converter tabela em excel e index=False pois não precisamos informar o numero de linhas para o excel.
print('Conversão para Excel concluída!')
